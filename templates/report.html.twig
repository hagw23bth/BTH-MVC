{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="inner-container grid-container">
        <div class="sidebar">
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                {# <li><a href="#kmom03">Kmom03</a></li> #}
                {# <li><a href="#kmom04">Kmom04</a></li> #}
                {# <li><a href="#kmom05">Kmom05</a></li> #}
                {# <li><a href="#kmom06">Kmom06</a></li> #}
                {# <li><a href="#kmom07/10">Kmom07/10</a></li> #}
            </ul>
        </div>
        <div class="content">
            <section id="kmom01"><h2>Kmom01</h2>
                <p>Jag har tidigare erfarenhet av objektorienterad programmering i Java, JavaScript och Python men inte i PHP så det blir nytt med den här kursen. Jag brukar tycka objektorienterat är kul eftersom det blir lite mer avancerat, organiserat och systematiskt.</p>
                <p>PHP:s objektorienterade programmering låter dig definiera klasser som mallar för att skapa objekt. En klass kan innehålla egenskaper (variabler) och metoder (funktioner) som definierar objektets tillstånd och beteende. Konstruktorer, specialmetoder som heter __construct, används för att initialisera nya objekt. PHP stöder enkel arv, vilket möjliggör att en klass kan ärva funktionalitet från en annan klass med nyckelordet extends. Synlighetsmodifikatorer som public, protected, och private styr åtkomsten till klassens medlemmar. För att komma igång, definiera en klass med dess egenskaper och metoder, instansiera klassen med new-nyckelordet, och interagera sedan med objektets egenskaper och metoder.</p>
                <p>Jag känner mig bekväm med html, twig, scss och känner på det stora hela att jag har fått till en bra kodbas. Men när det gäller php-delen känns det inte riktigt som att jag förstår vad det är jag gör. Jag utgick blankt från exemplet men förstår inte riktigt Controller-delen. Eller snarare, jag förstår koden men det känns främmande och jag förstår inte varför man gör som man gör och hade inte kunnat återskapa den själv.</p>
                <p>Jag har inte djupdykt i dokumentet utan tittade överskådligt. Jag bläddrade i getting started, code stylefuide och i Coding pratiges. Jag tror att det är en bra resurs att ha som uppslagsverk snarare än att läsa pärm till pärm. Jag kan tänka mig att man vill återkomma till dokumentet när teman som databaser, testing, caching och security blir relevanta.</p>
                <p><strong>TIL:</strong> Symphony och PHP-controllern.</p>

            </section>
            <section id="kmom02"><h2>Kmom02</h2>
                <p><strong>Arv</strong> i PHP tillåter en klass att ärva metoder och egenskaper från en annan klass. Detta används för att skapa en hierarki av klasser som delar gemensamma egenskaper och beteenden. Jag har använt arv i klassen CardGraphic, som ärver från Card. </p>
                <p><strong>Komposition</strong> innebär att en klass innehåller en eller flera instanser av andra klasser som delar av dess funktionalitet. Jag har använt komposition i CardDeck, där varje CardDeck innehåller flera instanser av Card. </p>
                <p><strong>Interface</strong> i PHP definierar en standardiserad uppsättning metoder som en klass måste implementera. Interface är användbara för att skapa kod som är flexibel och återanvändbar utan att implementera ett fullt arv. Jag har ännu inte använde mig av ett interface, men det skulle kunna vara användbart för att definiera standardoperationer för olika typer av kortspel.</p>
                <p><strong>Trait</strong> tillåter återanvändning av kodblock i flera klasser i PHP. Traits kan vara användbara för att dela beteenden mellan klasser utan att vara bunden av klasshierarkin. Jag har inte använd Traits men jag insåg när jag gjorde sista delen med API routes att det började bli ganska mycket upprepning och nu slår mig tanken att jag hade kunnat bryta ut delar av koden som upprepas i flera routes, exempelvis operationer för att blanda och dra kort, och lägga i ett Trait som jag sedan använder i mina kontrollers.</p>
                <p>Jag började med att utveckla grundläggande klasser - Card, CardGraphic och CardDecklösa för att sedan gå över tilll att lösa webbapplikation delen. Successivt kompletterade jag mina klasser och anpassade funktionerna tills webbdelen fungerade. Då gick jag över till API-delen och där tyckte jag det klurigaste var att förstå hur jag kunde testa mina routes och se om de fungerar. Jag har aldrig använt curl innan men använde det för att testa mina POST-routes. Men då verkade det först som att jag hade problem med sewssionhanteringen så laborerade rätt mycket med min kod för att försöka få det att fungera innan jag insåg att det var min testning som inte fungerade. Jag tänkte inte på att att mina curlkommanon verkar oberoende av varandra om jag inte använder cookies. När jag la till flaggor för cookies kunde jag testa flödet av att blanda och sedan dra, och att dra upprepade gånger och  se att allt fungerade. Jag är nöjd med strukturen och moduläriteten i koden men ser ganska mycket upprepning i min kod, så det måste gå att skriva den mycket effektivare. Jag hade nog kunnat använda interfaces eller trait exempelvis för att modularisera och effektivisera koden ännu mer. Klasserna tycker jag är logiskt uppdelade och fungerar bra men om man ska arbeta vidare med ett kortspel tror jag att jag behöver utöka med en Hand-klass också.</p>
                <p>Jag tycker det har gått ganska lätt att komma in i arbetssättet, i alla fall om man lyckas installera och sätta upp allt korrekt. Första och andra gången vi satte upp symfoni från scratch (i förra kmom) gick det jättebra men nu när jag skulle göra övningen i detta kmom var det flera saker som krånglade när jag skulle sätta upp och det var svårt att förstå felet. Och detta var innan jag ens hade kommit igång med själva uppgiften. Jag fick jämföra kommandon mellan den nya och de gamla övningsfilerna och de visade sig ha små variationer, jag installerade om allt från början vilket löste något problem men sen var det ändå något som inte fungerade så jag struntade i övningen efter flera timmar av debuggande. Jag läste igenom övningen dock. Började sedan med uppgiften och då har allt flutit på jättebra.</p>
                <p><strong>TIL:</strong> Sessionhantering I API. Testa API POST routes. Traits och interface.</p>
            </section>
            <section id="kmom03"><h2>Kmom03</h2>
                <p>Jag tyckte det var hjälpsamt och skönt att bryta ner problemet ordentligt och göra en plan innan jag började bygga upp koden. Framförallt tyckte jag psuedokoden var hjälpsam för det tvingade mig att fundera tidigigt på logiken, komponenter och loop-strukturen. Flödesschemat kan jag tänka mig är ett bra verktyg för att kunna visualisera och illustrera sin ide och förklara för andra men för mig personligen så hade psuedokoden räckt för att känna att jag har en plan och ser framför mig vad jag ska göra. Jag tar med mig de här verktygen inför kommande projekt. Flödesschema för de fall jag behöver få andra med på banan och psuedkod för att själv bryta ner ett problem och lägga upp en plan. Kodningsprocessen gick smidigt och följde i stor grad min plan.</p>
                <p>Jag försökte bygga vidare på klasser jag redan hade utan att göra några förändringar i de befintliga klasserna. För att få till spellogiken behövde jag komplettera med en klass för spelaren och en för banken samt en ny kontroller. Jag är nöjd med hur jag har valt att lösa detta.</p>
                <p>En förändring jag gjorde sedan förra kmom var att förenkla session-lagringen och frångå användning av serilisering/unserialisering, främst på grund av de fel jag stötte på med typvalideringen, särskilt när det gällde blandade typer (mixed type). Dessa problem gjorde det onödigt komplicerat för mitt ändamål att serialisera vid varje sessionlagring. Genom att undvika serialisering kunde jag förenkla koden och minska risken för typrelaterade buggar, vilket i sin tur gjorde applikationen mer pålitlig och lättare att underhålla. Nu känns koden snygg och robust och framförallt inte onödigt komplicerad.</p>
                <p>Det finns självklart mer förbättringspotential. Jag tror till exempel att en förbättring jag hade försökt mig på om jag arbetade vidare på koden är att komprimera bank-klassen så att den förlänger player-klassen istället. Där tror jag man skulle kunna spara sig en del upprepning. Jag hade även kunnat lägga mer kraft på att göra knappar och spelplan lite snyggare. Dessutom kan applikationens helhet förbättras med bättre felhantering och mer omfattande tester för att säkerställa robusthet och stabilitet.</p>
                <p>Överlag känner jag mig mer bekväm och självsäker i att använda Symfony, och jag ser fördelar med alla funktioner och hjälpmedel det är kompatibelt med.</p>
                <p><strong>TIL:</strong> De nya verktygen phpstan och phpmd samt vikten av enkel och robust sessionhantering. Och jag lärde mig göra formulär för att testa API post routes vilket jag missat i förra kmom då jag själv testade dem med Curl istället.</p>
            </section>
            {# <section id="kmom04"><h2>Kmom04</h2><p>Redovisningstext för kmom04</p></section> #}
            {# <section id="kmom05"><h2>Kmom05</h2><p>Redovisningstext för kmom05</p></section> #}
            {# <section id="kmom06"><h2>Kmom06</h2><p>Redovisningstext för kmom06</p></section> #}
            {# <section id="kmom07/10"><h2>Kmom07/10</h2><p>Redovisningstext för kmom07</p></section> #}
        </div>
    </div>
{% endblock %}

